*MySQL Workbench 열기

*root 계정으로 접속하고 쿼리 실행하기
GRANT ALL PRIVILEGES ON db_app06.* TO 'greenit'@'%';

*greenit 계정으로 접속하고 쿼리 실행하기
DROP DATABASE IF EXISTS db_app06;
CREATE DATABASE IF NOT EXISTS db_app06;

USE db_app06;

DROP TABLE IF EXISTS tbl_contact;
CREATE TABLE IF NOT EXISTS tbl_contact
(
    contact_id INT AUTO_INCREMENT COMMENT '연락처아이디',
    last_name  VARCHAR(100) COMMENT '성',
    first_name VARCHAR(100) COMMENT '이름',
    email      VARCHAR(100) COMMENT '이메일',
    mobile     VARCHAR(20) COMMENT '모바일',
    create_dt  DATE COMMENT '등록일',
    CONSTRAINT pk_contact PRIMARY KEY (contact_id)
) ENGINE=InnoDB COMMENT '연락처';

INSERT INTO tbl_contact VALUES (null, 'james', 'dean', 'jamesdean@gmail.com', '010-1111-1111', '2024-12-01');
INSERT INTO tbl_contact VALUES (null, 'john', 'park', 'johnpark@gmail.com', '010-2222-2222', '2024-12-02');
INSERT INTO tbl_contact VALUES (null, 'michael', 'jordan', 'michaeljordan@gmail.com', '010-3333-3333', '2024-12-03');
COMMIT;

* sts 열기

* app06 Maven Project 만들기

* pom.xml 수정하기 (신규 디펜던시 2개 : Java로 MySQL 사용하기 위한 Driver, 단위 테스트 junit과 함께 사용할 spring-test)
<!-- https://mvnrepository.com/artifact/com.mysql/mysql-connector-j -->
<dependency>
  <groupId>com.mysql</groupId>
  <artifactId>mysql-connector-j</artifactId>
  <version>8.0.33</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.springframework/spring-test -->
<dependency>
  <groupId>org.springframework</groupId>
  <artifactId>spring-test</artifactId>
  <version>${org.springframework-version}</version>
  <scope>test</scope>
</dependency>

* 쿼리문 저장하기
src/main/resources/data.sql

* web.xml 수정하기 (한글 깨짐 방지)
<!-- Filter : 특정 요청 시 컨트롤러 보다 먼저 동작하는 Web Component -->
<filter>
  <filter-name>characterEncodingFilter</filter-name>
  <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
  <init-param>
    <param-name>encoding</param-name>
    <param-value>UTF-8</param-value>
  </init-param>
</filter>
<!-- Filter-Mapping : Filter가 동작할 요청 주소 -->
<filter-mapping>
  <filter-name>characterEncodingFilter</filter-name>
  <url-pattern>/</url-pattern>
</filter-mapping>

* com.min.app06.dto 패키지 만들기

* ContactDto 클래스 만들기
* DTO : Data Transfer Object. 데이터 전송 객체. 주로 Java 와 DB 간 데이터 교환을 위해서 사용하는 객체를 의미합니다.

* com.min.app06.dao 패키지 만들기
* DAO : DataBase Access Object. 데이터베이스에 접속해서 CRUD 작업을 수행하는 역할을 수행하는 객체를 의미합니다.

* JdbcConnection 클래스 만들기 (데이터베이스 접속 및 접속 해제용)

* IContactDao 인터페이스 만들기 (인터페이스명은 I로 시작할 수 있습니다. Java 에서는 선택적으로 적용할 수 있습니다.)

* ContactDaoImpl 클래스 만들기 (인터페이스를 구현하는 클래스명은 Impl 로 끝나는 것이 정석입니다.)

* src/test/java 패티지에 ContactTest 클래스 만들기
