app01
-IoC Container (Spring Container)
-bean을 Spring Container에 만들어 두는 방법
  com.min.app01.pkg01_constructor : <bean> + <constructor-arg>
  com.min.app01.pkg01_setter : <bean> + <property>
  com.min.app01.pkg02_bean : @Configuration @Bean
  com.min.app01.pkg03_component : @Component


app02
-DI : Dependency Injection
-Spring Container에 저장된 bean을 가져오는 방법 : @Autowired를 어디에 적용하느냐?
  com.min.app02.pkg01_field : @Autowired field(field injection)
  com.min.app02.pkg02_setter : @Autowired setter(setter injection)
  com.min.app02.pkg03_constructor : @Autowired constructor(constructor injection)


app03
-요청과 응답을 담당하는 컨트롤러
  MvcController1 : ContextPath 요청 처리, 컨트롤러 메소드의 3가지 반환 타입(String, void, ModelAndView), webdir1 디렉터리 함께 참조
  MvcController2 : 컨트롤러의 대표 URL 처리, webdir2 디렉터리 함께 참조
  MvcController3 : <a> 태그의 파라미터 처리(HttpServletRequest, @RequestParam, 커맨드 객체), webdir3 디렉터리 함께 참조
  MvcController4 : <form> 태그의 파라미터 처리, webdir4 디렉터리 함께 참조
  MvcController5 : JavaScript 를 이용한 각종 요청 처리, webdir5/main.jsp 파일이 중요
  MvcController6 : 경로 변수(Path Variable)를 이용한 요청 처리, webdir6 디렉터리 함께 참조


app04
-이동 방식인 forward와 redirect
  MvcController1 : forward, Model, webdir1 디렉터리 함께 참조
  MvcController2 : redirect, RedirectAttributes, webdir2 디렉터리 함께 참조


app05
-세션 활용
  MvcController1 : HttpSession, main.jsp 함께 참조
  MvcController2 : @SessionAttributes, SessionStatus, main2.jsp 함께 참조


app06
-JDBC API를 활용한 CRUD 구현
  *pom.xml : mysql-connector-j 디펜던시
  *web.xml : CharactorEncodingFilter 설정
  *기본 동작 원리
        jsp : <a>, <form>, location.href 등을 이용해 요청(파라미터 전달 가능)
    → controller : 요청 받고, 해당 요청 처리할 서비스 메소드 호출
    → service : 요청 처리할 DAO 메소드 호출
    → dao : 요청 처리할 쿼리문 실행
    → dao : 쿼리문 실행 결과를 서비스로 반환
    → service : DAO 실행 결과를 컨트롤러로 반환
    → controller : 서비스 실행 결과를 Model/RedirectAttributes에 저장
    → 결과를 보여 줄 jsp로 forward 또는 redirect
    → Model/RedirectAttributes에 저장된 속성을 EL(${})로 확인하면 하나의 요청과 응답 사이클이 완료된다.
  *기본 동작 예시
    프로젝트 app06을 실행하면 ContextPath 경로가 실행되는데 이 때 열리는 파일은 main.jsp 파일임. 이 내용은 MvcController에 정의되어 있음
    ↓
    main.jsp에는 연락처 목록을 요청하는 <a href="${contextPath}/contact/list.do">연락처</a> 태그가 존재
    ↓
    ContactController에는 "/contact/list.do" 요청을 담당하는 list() 메소드가 존재함. 여기서 ContactServiceImpl에 있는 getAllCount() 메소드를 호출함
    ↓
    ContactServiceImpl의 getAllContact() 메소드는 ContactDaoImpl의 getContactList()/getContactCount() 메소드를 호출하여 전체 목록과 전체 목록 개수를 받음
    ↓
    ContactDaoImpl의 getContactList() 메소드는 "SELECT contact_id, last_name, first_name, email, mobile, create_dt FROM tbl_contact" 쿼리를 실행하여 전체 목록을 가져옴
    전체 목록은 ContactServiceImpl의 getAllContact() 메소드로 반환됨
    ↓
    ContactDaoImpl의 getContactCount() 메소드는 "SELECT COUNT(*) AS amount FROM tbl_contact" 쿼리를 실행하여 전체 목록 개수를 가져옴
    전체 목록 개수는 ContactServiceImpl의 getAllContact() 메소드로 반환됨
    ↓
    ContactServiceImpl은 반환 받은 전체 목록/전체 목록 개수를 Map으로 만들어서 ContactController의 list() 메소드로 반환함
    ↓
    ContactController의 list() 메소드는 반환 받은 Map의 전체 목록은 Model에 "contacts" 이름으로 저장함
    ContactController의 list() 메소드는 반환 받은 Map의 전체 목록 개수는 Model에 "count" 이름으로 저장함
    Model에 저장한 "contacts"와 "count" 확인은 "contact/list.jsp" 에서 가능함
    ↓
    contact/list.jsp 에서는 "contacts" 속성을 <c:forEach items="${contacts}"> 태그로 확인하고, "count" 속성을 ${count} 값으로 확인함
-JUnit5(JUnit Jupiter)를 활용한 단위 테스트 수행
  *pom.xml : spring-test 디펜던시, junit-jupiter-api 디펜던시
  *src/test/java/ContactDaoTest.java : JUnit 단위 테스트 사용 방법


app07
-MyBatis Framework를 활용한 CRUD 구현
  *pom.xml : mybatis 디펜던시, spring-mybatis 디펜던시, spring-jdbc 디펜던시, hikarycp 디펜던시, mysql-connector-j 디펜던시
  *web.xml : CharactorEncodingFilter 설정
  *src/main/resources/mybatis/configuration/mybatis-config.xml : 마이바티스 실행을 위한 환경 설정 값을 제공하는 파일
  *src/main/resources/mybatis/mappers/boardMapper.xml : 매퍼. 쿼리문을 작성하는 파일. 쿼리문마다 id 필요. 상황별로 parameterType, resultType 속성 사용
  *root-context.xml : <bean> 태그를 이용해 SqlSessionTemplate bean 생성, 마이바티스는 SqlSession을 이용해서 쿼리를 실행하는데 이 때 스프링은 SqlSession 대신 SqlSessionTemplate을 사용함
  *ContactServiceImpl : 매퍼에 작성된 쿼리문의 id 속성을 이용해서 원하는 쿼리문을 실행
  *src/test/java/BoardDaoTest.java : JUnit 단위 테스트 사용 방법


app08
- 단일 파일 첨부
  *pom.xml : fileupload 디펜던시
  *root-context.xml : multipartResolver bean 생성
  *FileUtil.java : 파일을 서버에 저장하기 위해서 필요한 파일 이름 및 파일 경로 반환 메소드 제공
  *서비스에서 등록 기능만 구현


app09
- 다중 파일 첨부
  *pom.xml : fileupload 디펜던시
  *root-context.xml : multipartResolver bean 생성
  *FileUtil.java : 파일을 서버에 저장하기 위해서 필요한 파일 이름 및 파일 경로 반환 메소드 제공
  *src/main/resources/data.sql 파일에서 다중 파일 첨부를 위한 테이블 구조 및 외래키 옵션(ON DELETE CASCADE) 적용 여부 확인
  *서비스에서 목록/등록/상세/삭제 기능 구현 (수정 기능만 누락)
  *서비스에서 다운로드 기능 구현되어 있으나 페이지 변환 없이 동작하는 비동기 방식으로 구현된 상태(비동기 학습 이전임)


app10
- 페이징 처리
  *대량의 데이터베이스 샘플 데이터 생성을 위해서 mockaroo.com 사이트 활용
  *PageUtil.java : 페이징 처리를 위한 모든 변수 저장 및 페이지 연결 링크를 String으로 제공하는 메소드 제공


app11
- AOP
  *pom.xml : aspectj weaver, aspectj runtime 디펜던시
  *AppConfig.java, BeforeAdvice.java, AroundAdvice.java : 어드바이스를 자바에서 만드는 방법
  *root-context.xml : 트랜잭션 매니저 생성 후 해당 매니저를 어드바이스로 등록하고 서비스 메소드중 get으로 시작하는 메소드를 제외한 나머지 메소드를 포인트컷 설정하는 내용


app12
- 회원 기능
  *SecureUtil.java : SHA-256 방식의 암호화 결과 반환 메소드, XSS(Cross Site Scripting) 공격 무력화 메소드 제공
  *LoginConfirmInterceptor : 로그인 없이 로그인이 필요한 기능을 사용하려고 할 때 로그인 페이지로 이동을 유도하는 기능 제공
  *servlet-context.xml : LoginConfirmInterceptor 동작을 위한 <interceptor> 태그 등록
  *로그인, 로그아웃 : 세션을 이용한 로그인과 로그아웃
  *회원가입 : 비밀번호 암호화
